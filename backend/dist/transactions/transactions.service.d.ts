import { CreateTransactionDto } from './dto/create-transaction.dto';
import { ITransactionRepository } from 'src/common/interfaces/transaction.repository.interface';
import { ITransactionItemRepository } from 'src/common/interfaces/transaction-item.repository.interface';
import { Prisma } from '@prisma/client';
import { PrismaService } from 'src/prisma/prisma.service';
import { ITransactionFilterService } from './interfaces/transaction-filter.service.interface';
import { TransactionStockService } from './services/transaction-stock.service';
import { CustomerBalanceService } from './services/customer-balance.service';
import { ProfitCalculationService } from './services/profit-calculation.service';
export declare class TransactionsService {
    private readonly transactionRepository;
    private readonly transactionItemRepository;
    private readonly prisma;
    private readonly transactionFilterService;
    private readonly transactionStockService;
    private readonly customerBalanceService;
    private readonly profitCalculationService;
    constructor(transactionRepository: ITransactionRepository, transactionItemRepository: ITransactionItemRepository, prisma: PrismaService, transactionFilterService: ITransactionFilterService, transactionStockService: TransactionStockService, customerBalanceService: CustomerBalanceService, profitCalculationService: ProfitCalculationService);
    createTransaction(userId: string, dto: CreateTransactionDto): Promise<{
        id: string;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        totalAmount: Prisma.Decimal;
        discountAmount: Prisma.Decimal;
        finalAmount: Prisma.Decimal;
        type: import(".prisma/client").$Enums.TransactionType;
        status: import(".prisma/client").$Enums.TransactionStatus;
        customerId: string | null;
        invoiceDate: Date | null;
        dueDate: Date | null;
        vatRate: number | null;
        currency: string | null;
        profit: Prisma.Decimal | null;
        customerPreviousBalance: Prisma.Decimal | null;
        customerNewBalance: Prisma.Decimal | null;
    }>;
    getTransactionsByUser(userId: string, field?: string, operator?: string, value?: string, endValue?: string): Promise<{
        id: string;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        totalAmount: Prisma.Decimal;
        discountAmount: Prisma.Decimal;
        finalAmount: Prisma.Decimal;
        type: import(".prisma/client").$Enums.TransactionType;
        status: import(".prisma/client").$Enums.TransactionStatus;
        customerId: string | null;
        invoiceDate: Date | null;
        dueDate: Date | null;
        vatRate: number | null;
        currency: string | null;
        profit: Prisma.Decimal | null;
        customerPreviousBalance: Prisma.Decimal | null;
        customerNewBalance: Prisma.Decimal | null;
    }[]>;
    getTransactionById(userId: string, transactionId: string): Promise<{
        id: string;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        totalAmount: Prisma.Decimal;
        discountAmount: Prisma.Decimal;
        finalAmount: Prisma.Decimal;
        type: import(".prisma/client").$Enums.TransactionType;
        status: import(".prisma/client").$Enums.TransactionStatus;
        customerId: string | null;
        invoiceDate: Date | null;
        dueDate: Date | null;
        vatRate: number | null;
        currency: string | null;
        profit: Prisma.Decimal | null;
        customerPreviousBalance: Prisma.Decimal | null;
        customerNewBalance: Prisma.Decimal | null;
    }>;
    getProfitLast30Days(userId: string): Promise<Prisma.Decimal>;
    updateTransaction(userId: string, transactionId: string, dto: CreateTransactionDto): Promise<{
        id: string;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        totalAmount: Prisma.Decimal;
        discountAmount: Prisma.Decimal;
        finalAmount: Prisma.Decimal;
        type: import(".prisma/client").$Enums.TransactionType;
        status: import(".prisma/client").$Enums.TransactionStatus;
        customerId: string | null;
        invoiceDate: Date | null;
        dueDate: Date | null;
        vatRate: number | null;
        currency: string | null;
        profit: Prisma.Decimal | null;
        customerPreviousBalance: Prisma.Decimal | null;
        customerNewBalance: Prisma.Decimal | null;
    }>;
    deleteTransaction(userId: string, transactionId: string): Promise<void>;
}

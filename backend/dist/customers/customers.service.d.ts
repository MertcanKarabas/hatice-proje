import { CreateCustomerDto } from './dto/create-customer.dto';
import { CreatePaymentCollectionDto } from './dto/create-payment-collection.dto';
import { ICustomerRepository } from 'src/common/interfaces/customer.repository.interface';
import { ITransactionRepository } from 'src/common/interfaces/transaction.repository.interface';
import { ICustomerFilterService } from './interfaces/customer-filter.service.interface';
import { PaymentCollectionService } from './services/payment-collection.service';
export declare class CustomersService {
    private readonly customerRepository;
    private readonly transactionRepository;
    private readonly customerFilterService;
    private readonly paymentCollectionService;
    constructor(customerRepository: ICustomerRepository, transactionRepository: ITransactionRepository, customerFilterService: ICustomerFilterService, paymentCollectionService: PaymentCollectionService);
    createCustomer(userId: string, dto: CreateCustomerDto): Promise<{
        id: string;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        type: import("generated/prisma").$Enums.CustomerType;
        email: string | null;
        commercialTitle: string;
        phone: string | null;
        taxNumber: string | null;
        address: string;
        taxOffice: string | null;
        balance: import("generated/prisma/runtime/library").Decimal;
    }>;
    findAllByUser(userId: string, field?: string, operator?: string, value?: string): Promise<{
        id: string;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        type: import("generated/prisma").$Enums.CustomerType;
        email: string | null;
        commercialTitle: string;
        phone: string | null;
        taxNumber: string | null;
        address: string;
        taxOffice: string | null;
        balance: import("generated/prisma/runtime/library").Decimal;
    }[]>;
    findOne(userId: string, customerId: string): Promise<{
        id: string;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        type: import("generated/prisma").$Enums.CustomerType;
        email: string | null;
        commercialTitle: string;
        phone: string | null;
        taxNumber: string | null;
        address: string;
        taxOffice: string | null;
        balance: import("generated/prisma/runtime/library").Decimal;
    }>;
    updateCustomer(userId: string, customerId: string, dto: CreateCustomerDto): Promise<{
        id: string;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        type: import("generated/prisma").$Enums.CustomerType;
        email: string | null;
        commercialTitle: string;
        phone: string | null;
        taxNumber: string | null;
        address: string;
        taxOffice: string | null;
        balance: import("generated/prisma/runtime/library").Decimal;
    }>;
    deleteCustomer(userId: string, customerId: string): Promise<void>;
    getTransactions(userId: string, customerId: string): Promise<{
        id: string;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        totalAmount: import("generated/prisma/runtime/library").Decimal;
        discountAmount: import("generated/prisma/runtime/library").Decimal;
        finalAmount: import("generated/prisma/runtime/library").Decimal;
        type: import("generated/prisma").$Enums.TransactionType;
        status: import("generated/prisma").$Enums.TransactionStatus;
        customerId: string | null;
        invoiceDate: Date | null;
        dueDate: Date | null;
        vatRate: number | null;
        currency: string | null;
        profit: import("generated/prisma/runtime/library").Decimal | null;
    }[]>;
    createPaymentCollection(userId: string, dto: CreatePaymentCollectionDto): Promise<{
        id: string;
        userId: string;
        createdAt: Date;
        updatedAt: Date;
        totalAmount: import("generated/prisma/runtime/library").Decimal;
        discountAmount: import("generated/prisma/runtime/library").Decimal;
        finalAmount: import("generated/prisma/runtime/library").Decimal;
        type: import("generated/prisma").$Enums.TransactionType;
        status: import("generated/prisma").$Enums.TransactionStatus;
        customerId: string | null;
        invoiceDate: Date | null;
        dueDate: Date | null;
        vatRate: number | null;
        currency: string | null;
        profit: import("generated/prisma/runtime/library").Decimal | null;
    }>;
}

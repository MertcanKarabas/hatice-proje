// prisma/parts/_base.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}enum CustomerType {
  SALES
  PURCHASE
}

model Customer {
  id              String   @id @default(cuid())
  commercialTitle String   // Ticari Ünvan
  address         String   // Adress
  taxOffice       String?  // Vergi Dairesi
  taxNumber       String?  // Vergi No
  email           String?  @unique
  phone           String?  // Telefon No
  balance         Decimal  @db.Decimal(18, 2) @default(0)
  exchangeId      String?
  exchange        Exchange? @relation(fields: [exchangeId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  transactions Transaction[]
  type            CustomerType @default(SALES)
}enum Currency {
  TRY
  USD
  EUR
}

enum ProductUnit {
  ADET
  DESTE
  PAKET
}

model Product {
  id                 String             @id @default(cuid())
  userId             String
  user               User               @relation(fields: [userId], references: [id])
  name               String
  description        String?
  sku                String             @unique
  barcode            String?            @unique
  price               Decimal            @db.Decimal(18, 2)
  transactionItems   TransactionItem[]
  quantity           Float              @default(0)
  unit               ProductUnit        @default(ADET)
  currency           Currency           @default(TRY)
  stock              Stock[]
  isPackage          Boolean            @default(false)
  packageComponents  ProductComponent[] @relation("Package")
  componentOfPackages ProductComponent[] @relation("Component")
}

model ProductComponent {
  id          String  @id @default(cuid())
  packageId   String
  package     Product @relation("Package", fields: [packageId], references: [id])
  componentId String
  component   Product @relation("Component", fields: [componentId], references: [id])
  quantity    Int
}

model Stock {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  quantity  Int

  @@unique([productId, userId])
}model Transaction {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  items             TransactionItem[]
  payments          Payment[]
  totalAmount       Decimal           @db.Decimal(18, 2)
  discountAmount    Decimal           @default(0) @db.Decimal(18, 2)
  finalAmount       Decimal           @db.Decimal(18, 2)
  type              TransactionType
  status            TransactionStatus @default(PENDING)
  discounts         Discount[]
  customerId       String?           // Müşteri ID'si (opsiyonel olabilir)
  customer         Customer?         @relation(fields: [customerId], references: [id])
  invoiceDate      DateTime?
  dueDate          DateTime?
  vatRate          Int?
  exchangeId       String?
  exchange         Exchange?         @relation(fields: [exchangeId], references: [id])
  profit            Decimal?          @db.Decimal(18, 2)
  customerPreviousBalance Decimal?           @default(0) @db.Decimal(18, 2)
  customerNewBalance      Decimal?           @default(0) @db.Decimal(18, 2)
}

model TransactionItem {
  id            String      @id @default(cuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  quantity      Int
  price         Decimal     @db.Decimal(18, 2) // Price per unit at time of transaction
  unit          String
  vatRate       Int
}

model Payment {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  amount          Decimal         @db.Decimal(18, 2)
  exchangeId      String
  exchange        Exchange        @relation(fields: [exchangeId], references: [id])
  paymentMethod   PaymentMethod
  status          PaymentStatus   @default(PENDING)
  transactionId   String?
  transaction     Transaction?    @relation(fields: [transactionId], references: [id])
}

model Exchange {
  id       String    @id @default(cuid())
  name     String // e.g., "US Dollar"
  code     String    @unique // e.g., "USD"
  rate     Decimal   @db.Decimal(12, 6) // Exchange rate against a base currency
  payments Payment[]
  customers Customer[]
  transactions Transaction[]
}

model Discount {
  id            String      @id @default(cuid())
  code          String?     @unique
  description   String?
  amount        Decimal      @db.Decimal(18, 2)
  isPercentage  Boolean     @default(false)
  transactionId String?
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
}

enum TransactionType {
  SALE
  PURCHASE
  PAYMENT
  COLLECTION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  OTHER
}model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  products      Product[]
  stocks        Stock[]
  customers     Customer[]
}

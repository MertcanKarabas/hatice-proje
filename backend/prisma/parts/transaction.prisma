model Transaction {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  items             TransactionItem[]
  payments          Payment[]
  totalAmount       Decimal           @db.Decimal(10, 2)
  discountAmount    Decimal           @default(0) @db.Decimal(10, 2)
  finalAmount       Decimal           @db.Decimal(10, 2)
  type              TransactionType
  status            TransactionStatus @default(PENDING)
  discounts         Discount[]
  customerId       String?           // Müşteri ID'si (opsiyonel olabilir)
  customer         Customer?         @relation(fields: [customerId], references: [id])
}

model TransactionItem {
  id            String      @id @default(cuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  quantity      Int
  price         Decimal     @db.Decimal(10, 2) // Price per unit at time of transaction
  unit          String
  vatRate       Int
}

model Payment {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  amount          Decimal         @db.Decimal(10, 2)
  exchangeId      String
  exchange        Exchange        @relation(fields: [exchangeId], references: [id])
  paymentMethod   PaymentMethod
  status          PaymentStatus   @default(PENDING)
  transactionId   String?
  transaction     Transaction?    @relation(fields: [transactionId], references: [id])
}

model Exchange {
  id       String    @id @default(cuid())
  name     String // e.g., "US Dollar"
  code     String    @unique // e.g., "USD"
  rate     Decimal   @db.Decimal(12, 6) // Exchange rate against a base currency
  payments Payment[]
}

model Discount {
  id            String      @id @default(cuid())
  code          String?     @unique
  description   String?
  amount        Decimal     @db.Decimal(10, 2)
  isPercentage  Boolean     @default(false)
  transactionId String?
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
}

enum TransactionType {
  SALE
  PURCHASE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  OTHER
}